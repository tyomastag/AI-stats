import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext, ConversationHandler
import sqlite3
from functools import partial
 
ASKING_NAME, ASKING_LEVEL, ASKING_RARITY = range(3)
 
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
 
logger = logging.getLogger(__name__)
 
TOKEN = "YOUR TOKEN"
 
def text_handler(update: Update, context: CallbackContext):
    update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
 
 
def get_conn():
    return sqlite3.connect("catlets.db")
 
def create_table():
    with get_conn() as conn:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS catlets
                            (id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER NOT NULL,
                            name TEXT NOT NULL,
                            level INTEGER NOT NULL,
                            wins INTEGER NOT NULL,
                            losses INTEGER NOT NULL,
                            daily_wins INTEGER NOT NULL,
                            daily_losses INTEGER NOT NULL);''')
        conn.commit()
 
def start(update: Update, context: CallbackContext):
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ö–ê–¢–ª–µ—Ç–æ–≤.')
    main_menu(update, context)
 
def main_menu(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üèÜ –û–±—â–∞—è", callback_data='show_stats'),
         InlineKeyboardButton("üèÜ –°–µ–≥–æ–¥–Ω—è", callback_data='show_daily_stats')],  # –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –¥–µ–Ω—å", callback_data='reset_daily_stats')],  # –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É
        [InlineKeyboardButton("‚öîÔ∏è –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è", callback_data='competitions')],
        [InlineKeyboardButton("üê± –ö–ê–¢–ª–µ—Ç—ã", callback_data='catlets')],
    ]
 
    reply_markup = InlineKeyboardMarkup(keyboard)
 
    if update.message:
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
    else:
        update.callback_query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
 
def catlets_menu(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ö–ê–¢–ª–µ—Ç–∞", callback_data='add_catlet')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ö–ê–¢–ª–µ—Ç–∞", callback_data='delete_catlet')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_competitions')],
    ]
 
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
 
def competitions_menu(update: Update, context: CallbackContext):
    keyboard = []
 
    with get_conn() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM catlets WHERE user_id=?", (update.callback_query.from_user.id,))
        result = cursor.fetchall()
        sorted_result = sorted(result, key=lambda x: x[0])  # –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        for row in sorted_result:
            catlet_name = row[0]
            keyboard.append([
                InlineKeyboardButton(f"‚úÖ {catlet_name}", callback_data=f"win_{catlet_name}"),
                InlineKeyboardButton(f"üí¢ {catlet_name}", callback_data=f"lose_{catlet_name}")
            ])
 
    keyboard.append([InlineKeyboardButton("‚è™ –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data='main_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
 
def menu_actions(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
 
    stats = None
 
    if query.data == 'reset_daily_stats':
        reset_daily_stats(update, context)
 
    if query.data == 'show_daily_stats':
        update_daily_stats(update, context)
 
    if query.data == 'main_menu':
        main_menu(update, context)
    elif query.data == 'show_stats':
        update_stats(update, context)
    elif query.data == 'competitions':
        competitions_menu(update, context)
    elif query.data == 'catlets':
        catlets_menu(update, context)
    elif query.data == 'delete_catlet':
        delete_catlet_menu(update, context)
    elif query.data.startswith("win_"):
        catlet_name = query.data.split("_", 1)[1]
        increment_wins(update, context, catlet_name)
    elif query.data.startswith("lose_"):
        catlet_name = query.data.split("_", 1)[1]
        increment_losses(update, context, catlet_name)
    elif query.data == 'back_to_competitions':
        competitions_menu(update, context)
    elif query.data == 'back_to_catlets':
        catlets_menu(update, context)
    elif query.data.startswith("delete_"):
        catlet_name = query.data.split("_", 1)[1]
        remove_catlet(update, context, catlet_name)
 
 
def update_stats(update: Update, context: CallbackContext):
    user_id = update.callback_query.from_user.id
    stats = []
    total_wins = 0
    total_losses = 0
 
    with get_conn() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name, wins, losses FROM catlets WHERE user_id=? ORDER BY name ASC", (user_id,))
        result = cursor.fetchall()
        for row in result:
            name, wins, losses = row
            winrate = (wins / (wins + losses)) * 100 if (wins + losses) > 0 else 0
            stats.append(f"{name} (—É—Ä–æ–≤–µ–Ω—å {level}): {wins}W / {losses}L ({winrate:.2f}%)")
            total_wins += wins
            total_losses += losses
 
    total_winrate = (total_wins / (total_wins + total_losses)) * 100 if (total_wins + total_losses) > 0 else 0
    stats.append(f"\n–û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {total_winrate:.2f}%")
 
    keyboard = [
        [InlineKeyboardButton("‚è™ –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
 
    if stats:
        query = update.callback_query
        query.answer()
        query.message.reply_text("\n".join(stats), reply_markup=reply_markup)
    else:
        query = update.callback_query
        query.answer()
        query.message.reply_text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.', reply_markup=reply_markup)
 
def reset_daily_stats(update: Update, context: CallbackContext):
    user_id = update.callback_query.from_user.id
 
    with get_conn() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE catlets SET daily_wins=0, daily_losses=0 WHERE user_id=?", (user_id,))
        conn.commit()
 
    update.callback_query.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ '–ó–∞ —Å–µ–≥–æ–¥–Ω—è' —Å–±—Ä–æ—à–µ–Ω–∞!")
    main_menu(update, context)
 
def update_daily_stats(update: Update, context: CallbackContext):
    user_id = update.callback_query.from_user.id
    stats = []
    total_daily_wins = 0
    total_daily_losses = 0
 
    with get_conn() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name, level, daily_wins, daily_losses FROM catlets WHERE user_id=? ORDER BY name ASC", (user_id,))
        result = cursor.fetchall()
        for row in result:
            name, daily_wins, daily_losses, level = row
            winrate = (daily_wins / (daily_wins + daily_losses)) * 100 if (daily_wins + daily_losses) > 0 else 0
            stats.append(f"{name} (—É—Ä–æ–≤–µ–Ω—å {level}): {daily_wins}W / {daily_losses}L ({winrate:.2f}%)")
            total_daily_wins += daily_wins
            total_daily_losses += daily_losses
 
    total_daily_winrate = (total_daily_wins / (total_daily_wins + total_daily_losses)) * 100 if (total_daily_wins + total_daily_losses) > 0 else 0
    stats.append(f"\n–û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total_daily_winrate:.2f}%")
 
    keyboard = [
        [InlineKeyboardButton("‚è™ –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
 
    if stats:
        query = update.callback_query
        query.answer()
        query.message.reply_text("\n".join(stats), reply_markup=reply_markup)
    else:
        query = update.callback_query
        query.answer()
        query.message.reply_text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.', reply_markup=reply_markup)
 
def ask_name(update: Update, context: CallbackContext):
    name = update.message.text
    context.user_data['name'] = name
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ç–ª–µ—Ç–∞:')
    return ASKING_LEVEL
 
def ask_level(update: Update, context: CallbackContext):
    level = int(update.message.text)
    name = context.user_data['name']
    user_id = update.message.from_user.id
    with get_conn() as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO catlets(user_id, name, level, wins, losses, daily_wins, daily_losses) VALUES (?, ?, ?, 0, 0, 0, 0)",
                       (user_id, name, level))
        conn.commit()
    update.message.reply_text(f'–ö–∞—Ç–ª–µ—Ç {name} (—É—Ä–æ–≤–µ–Ω—å {level}) –¥–æ–±–∞–≤–ª–µ–Ω!')
    main_menu(update, context)
    return ConversationHandler.END
 
def delete_catlet_menu(update: Update, context: CallbackContext):
    keyboard = []
 
    with get_conn() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM catlets WHERE user_id=?", (update.callback_query.from_user.id,))
        result = cursor.fetchall()
        for row in result:
            catlet_name = row[0]
            keyboard.append([InlineKeyboardButton(f"{catlet_name}", callback_data=f"delete_{catlet_name}")])
 
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='catlets')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ö–ê–¢–ª–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=reply_markup)
 
def remove_catlet(update: Update, context: CallbackContext, catlet_name: str):
    user_id = update.callback_query.from_user.id
    with get_conn() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM catlets WHERE user_id=? AND name=?", (user_id, catlet_name))
        conn.commit()
 
    update.callback_query.message.reply_text(f"–ö–ê–¢–ª–µ—Ç '{catlet_name}' —É–¥–∞–ª–µ–Ω!")
    catlets_menu(update, context)
 
def increment_wins(update: Update, context: CallbackContext, catlet_name: str):
    user_id = update.callback_query.from_user.id
 
    with get_conn() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE catlets SET wins=wins+1, daily_wins=daily_wins+1 WHERE user_id=? AND name=?", (user_id, catlet_name))
        conn.commit()

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
        cursor.execute("SELECT level, daily_wins, daily_losses FROM catlets WHERE user_id=? AND name=?", (user_id, catlet_name))
        level, daily_wins, daily_losses = cursor.fetchone()
        winrate = (daily_wins / (daily_wins + daily_losses)) * 100 if (daily_wins + daily_losses) > 0 else 0
 
    update.callback_query.message.reply_text(f"‚úÖ –ü–æ–±–µ–¥–∞ –∑–∞ {catlet_name} (—É—Ä–æ–≤–µ–Ω—å {level})\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_wins}W / {daily_losses}L ({winrate:.2f}%)")
    competitions_menu(update, context)

def increment_losses(update: Update, context: CallbackContext, catlet_name: str):
    user_id = update.callback_query.from_user.id
 
    with get_conn() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE catlets SET losses=losses+1, daily_losses=daily_losses+1 WHERE user_id=? AND name=?", (user_id, catlet_name))
        conn.commit()
 
        cursor.execute("SELECT level, daily_wins, daily_losses FROM catlets WHERE user_id=? AND name=?", (user_id, catlet_name))
        level, daily_wins, daily_losses = cursor.fetchone()
        winrate = (daily_wins / (daily_wins + daily_losses)) * 100 if (daily_wins + daily_losses) > 0 else 0
 
    update.callback_query.message.reply_text(f"üí¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {catlet_name} (—É—Ä–æ–≤–µ–Ω—å {level})\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_wins}W / {daily_losses}L ({winrate:.2f}%)")
    competitions_menu(update, context)
 
def add_catlet(update: Update, context: CallbackContext):
    update.callback_query.answer()
    update.callback_query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞—Ç–ª–µ—Ç–∞:')
 
    return ASKING_NAME
 
def cancel_add_catlet(update: Update, context: CallbackContext):
    update.message.reply_text('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–ª–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    main_menu(update, context)
    return ConversationHandler.END
 
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(add_catlet, pattern='^add_catlet$')],
    states={
        ASKING_NAME: [MessageHandler(Filters.text & ~Filters.command, ask_name)],
        ASKING_LEVEL: [MessageHandler(Filters.regex(r'^\d+$'), ask_level)],
    },
    fallbacks=[CommandHandler('cancel_add_catlet', cancel_add_catlet)]
)
 
 
def main():
    create_table()
 
    updater = Updater(TOKEN, use_context=True)
 
    dp = updater.dispatcher
    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, text_handler))
    dp.add_handler(CallbackQueryHandler(menu_actions))
 
    updater.start_polling()
    updater.idle()
 
if __name__ == '__main__':
    main()
